# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# Options
option(LIGHTING_TESTS "" ON)

project(lightning
	LANGUAGES
		CXX
)

if(CMAKE_SYSTEM_PROCESSOR MATCHES "(amd64)|(AMD64)|(x86_64)") # x86_64
	# zydis
	set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
	if(CMAKE_FOLDER)
		set(CMAKE_FOLDER "${CMAKE_FOLDER}/zydis")
	else()
		set(CMAKE_FOLDER zydis)
	endif()
	add_subdirectory(zydis)
	set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

endif()
if(LIGHTING_TESTS) # tests
	# tests
	set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
	if(CMAKE_FOLDER)
		set(CMAKE_FOLDER "${CMAKE_FOLDER}/tests")
	else()
		set(CMAKE_FOLDER tests)
	endif()
	add_subdirectory(tests)
	set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

endif()
# Target libli
set(CMKR_TARGET libli)
set(libli_SOURCES "")

list(APPEND libli_SOURCES
	"src/ir/analysis.cpp"
	"src/ir/lifter.cpp"
	"src/ir/opt_cfg.cpp"
	"src/ir/opt_dce.cpp"
	"src/ir/opt_id.cpp"
	"src/ir/opt_phi.cpp"
	"src/ir/utils.cpp"
	"src/ir/value.cpp"
	"src/lang/lexer.cpp"
	"src/lang/operator.cpp"
	"src/lang/parser.cpp"
	"src/lib/std.cpp"
	"src/util/platform.cpp"
	"src/vm/array.cpp"
	"src/vm/function.cpp"
	"src/vm/gc.cpp"
	"src/vm/interp.cpp"
	"src/vm/state.cpp"
	"src/vm/string.cpp"
	"src/vm/table.cpp"
	"src/vm/userdata.cpp"
	"include/ir/arch.hpp"
	"include/ir/insn.hpp"
	"include/ir/lifter.hpp"
	"include/ir/opt.hpp"
	"include/ir/proc.hpp"
	"include/ir/value.hpp"
	"include/jit/zydis.hpp"
	"include/lang/lexer.hpp"
	"include/lang/operator.hpp"
	"include/lang/parser.hpp"
	"include/lang/types.hpp"
	"include/lib/std.hpp"
	"include/util/common.hpp"
	"include/util/enuminfo.hpp"
	"include/util/format.hpp"
	"include/util/func.hpp"
	"include/util/llist.hpp"
	"include/util/platform.hpp"
	"include/util/typeinfo.hpp"
	"include/util/user.hpp"
	"include/util/utf.hpp"
	"include/vm/array.hpp"
	"include/vm/bc.hpp"
	"include/vm/function.hpp"
	"include/vm/gc.hpp"
	"include/vm/state.hpp"
	"include/vm/string.hpp"
	"include/vm/table.hpp"
	"include/vm/traits.hpp"
	"include/vm/userdata.hpp"
)

list(APPEND libli_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${libli_SOURCES})
add_library(libli STATIC)

if(libli_SOURCES)
	target_sources(libli PRIVATE ${libli_SOURCES})
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${libli_SOURCES})

target_compile_features(libli PUBLIC
	cxx_std_20
)

target_include_directories(libli PUBLIC
	include
)

if(CMAKE_SYSTEM_PROCESSOR MATCHES "(amd64)|(AMD64)|(x86_64)") # x86_64
	target_link_libraries(libli PUBLIC
		Zydis
	)
endif()

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

# Target li
set(CMKR_TARGET li)
set(li_SOURCES "")

list(APPEND li_SOURCES
	repl.cpp
)

list(APPEND li_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${li_SOURCES})
add_executable(li)

if(li_SOURCES)
	target_sources(li PRIVATE ${li_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT li)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${li_SOURCES})

target_link_libraries(li PRIVATE
	libli
)

if(EMSCRIPTEN) # emscripten
	target_link_options(li PRIVATE
		-sEXPORTED_RUNTIME_METHODS=ccall,cwrap
		-sEXTRA_EXPORTED_RUNTIME_METHODS=ccall,cwrap
		-sEXPORTED_FUNCTIONS=_main,_runscript
	)
endif()

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

install(
	TARGETS
		li
	DESTINATION
		bin
	COMPONENT
		li
)
if(EMSCRIPTEN) # emscripten
	install(
		FILES
			"$<TARGET_FILE_DIR:li>/li.wasm"
		DESTINATION
			bin
	)
endif()
