# TODO:
# - switch
# - for/loop/while
# - upvalues, varargs
# - table unpack via ...
# - destructuring
#   const [a,b,c] = x() == a=x()[0], ...
#   const {a,b,c} = x() == a=x().a,  ...
#   
# - core::to_string
# - arrays/userdata/metatables/coroutines|thread
# - try/catch
# - ternary
# - string escape, long strings
# - better lexer errors, debug info
# - GC, JIT
# - force inlined, immutable, private, macros
# macro __add(a, b) {
# 	a + b
# }
# - error on meaningless expressions (e.g. "1 2 3" as a line)
#


const test = | | {
	const a = 0
	const b = (
		if a<=1 {
			5
		} else if a==3 {
			6
		} else {
			7
		}) * 3

	print(a, b)
}

const x = {x, a:4}
x.a *= 3
print(x.a)

test()
#@printbc(test)


#z = 1
#
#print(k == {})
#
#const meme = |n| {
#	z += n;
#	5
#}
#@printbc(meme)
#
#
#print("hello")
#
#print "hi"
#
#return sqrt(meme(4))


#let z;
#const x = 2*4; # const folded
#
#a =  x * x
#b = "test" .. "test2" # const folded
#
#
#let x = 4.421e2 # test
#const y = true
#let ayy = 0b1e10
#
#
#aaaa = (-(1 + 3 % (4 / 6))) * 1
#
#let tbl = {a:4, y, z:y}
#tbl.m = 4
#
#const zz = { 
#	3;
#	4
#}
#tbl.k = {
#	let a = zz;
#	a+=1
#}
#return tbl

#if y {
# 
#} else if x {
#	x = switch x {
#		case 4:
#			5
#			break
#		default:
#			6
#	}
#}
#
#while x != 0 || x != 0 {
#	x -= 1
#	continue
#}
#
#for a in "kek" {
#  x += a;
#}
#
#loop {
#	break
#}
