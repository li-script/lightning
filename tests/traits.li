import math

const tbl = {a:4}

# Comparison.
#
tbl::eq!(|a,b| math.sgn(a.a*b.a) == 1)
assert(tbl=={a:5})
assert({a:5}==tbl)
assert(tbl!={a:-5})
assert({a:-5}!=tbl)

# Coercion.
#
tbl::str!(|| `<{self.a}>`)
assert(tbl::str() == "<4>")

# Unary.
#
tbl::neg!(|| {
   const r = self::dup()
   r.a = -r.a;
   r
})
assert((-tbl)::str() == "<-4>")

# Binary.
#
tbl::add!(|a, b| {
   const r = self::dup()
   r.a = a.a + b.a;
   r
})
const x = tbl + {a:7}
assert(x.a == (7+4))
const y = {a:8} + x
assert(y.a == (8+4+7))

# Length.
#
tbl::len!(|| 999)
assert(tbl::len() == 999)

# Get as table or function.
#
tbl::get!(|k| {
   if k == "a2" {
      return self.a * self.a
   }
})
assert(tbl.a2 == 16)

tbl::get!({z: 3})
assert(tbl.z == 3)

# Set.
#
const set_list = []
tbl::set!(|k, v| {
   set_list += {k, v}
});
tbl.c = 4
assert(set_list[0].k == "c" && set_list[0].v == 4)

# Hide.
#
assert(tbl::set!() is function)
tbl::hide!(true)
assert(tbl::set!() == nil)

# Freeze.
#
tbl::freeze!(true);
try {
   tbl.z = 45
   assert(false)
} catch ex {
   assert("modifying frozen" in ex)
}

# Seal.
#
tbl::seal!(true);
try {
   tbl::seal!(false);
   assert(false)
} catch ex {
   assert("modifying sealed" in ex)
}