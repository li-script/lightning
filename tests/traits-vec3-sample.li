import math

const vec3 = {}
vec3::get!({
   dot:  |a| (a.x*self.x+a.y*self.y+a.z*self.z),
   size: 3
})
vec3::len!(|| math.sqrt(self->dot(self)))
vec3::neg!(|| vec3(-self.x,-self.y,-self.z))
vec3::add!(|a,b| vec3(a.x+b.x,a.y+b.y,a.z+b.z))
vec3::sub!(|a,b| vec3(a.x-b.x,a.y-b.y,a.z-b.z))
vec3::mul!(|a,b| vec3(a.x*b.x,a.y*b.y,a.z*b.z))
vec3::div!(|a,b| vec3(a.x/b.x,a.y/b.y,a.z/b.z))
vec3::mod!(|a,b| vec3(a.x%b.x,a.yx%b.y,a.zx%b.z))
vec3::pow!(|a,b| vec3(a.x^b.x,a.yx^b.y,a.zx^b.z))
vec3::eq!(|a,b| a.x==b.x && a.y==b.y && a.z==b.z)
vec3::str!(|| `{{{self.x},{self.y},{self.z}}}`)
vec3::call!(|x,y,z| {x,y,z}::join(vec3))
vec3::seal!(true)


const a = vec3(1,2,0)
const b = vec3(5,6,7)

print(((a+b)*-a)::str())
assert(a == vec3(1,2,0))
assert(((a+b)*-a)::str() == "{-6,-16,-0}")
assert(a->dot(b) == 17)
assert(math.floor(a::len()) == 2)
assert(a.size == 3)