# This file is automatically generated from cmake.toml - DO NOT EDIT
# See https://github.com/build-cpp/cmkr for more information

cmake_minimum_required(VERSION 3.15)

if(CMAKE_SOURCE_DIR STREQUAL CMAKE_BINARY_DIR)
	message(FATAL_ERROR "In-tree builds are not supported. Run CMake from a separate directory: cmake -B build")
endif()

# Regenerate CMakeLists.txt automatically in the root project
set(CMKR_ROOT_PROJECT OFF)
if(CMAKE_CURRENT_SOURCE_DIR STREQUAL CMAKE_SOURCE_DIR)
	set(CMKR_ROOT_PROJECT ON)

	# Bootstrap cmkr
	include(cmkr.cmake OPTIONAL RESULT_VARIABLE CMKR_INCLUDE_RESULT)
	if(CMKR_INCLUDE_RESULT)
		cmkr()
	endif()

	# Enable folder support
	set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# Create a configure-time dependency on cmake.toml to improve IDE support
if(CMKR_ROOT_PROJECT)
	configure_file(cmake.toml cmake.toml COPYONLY)
endif()

# Options
option(LIGHTING_TESTS "" ON)

project(LibLi)

if(LIGHTING_TESTS) # tests
	# tests
	set(CMKR_CMAKE_FOLDER ${CMAKE_FOLDER})
	if(CMAKE_FOLDER)
		set(CMAKE_FOLDER "${CMAKE_FOLDER}/tests")
	else()
		set(CMAKE_FOLDER tests)
	endif()
	add_subdirectory(tests)
	set(CMAKE_FOLDER ${CMKR_CMAKE_FOLDER})

endif()
# Target LibLi
set(CMKR_TARGET LibLi)
set(LibLi_SOURCES "")

list(APPEND LibLi_SOURCES
	"src/lang/lexer.cpp"
	"src/lang/operator.cpp"
	"src/lang/paser.cpp"
	"src/lib/std.cpp"
	"src/main.cpp"
	"src/util/platform.cpp"
	"src/vm/array.cpp"
	"src/vm/function.cpp"
	"src/vm/gc.cpp"
	"src/vm/interp.cpp"
	"src/vm/state.cpp"
	"src/vm/string.cpp"
	"src/vm/table.cpp"
	"include/lang/lexer.hpp"
	"include/lang/operator.hpp"
	"include/lang/parser.hpp"
	"include/lang/types.hpp"
	"include/lib/std.hpp"
	"include/util/common.hpp"
	"include/util/format.hpp"
	"include/util/llist.hpp"
	"include/util/platform.hpp"
	"include/util/user.hpp"
	"include/vm/array.hpp"
	"include/vm/bc.hpp"
	"include/vm/function.hpp"
	"include/vm/gc.hpp"
	"include/vm/state.hpp"
	"include/vm/string.hpp"
	"include/vm/table.hpp"
)

list(APPEND LibLi_SOURCES
	cmake.toml
)

set(CMKR_SOURCES ${LibLi_SOURCES})
add_executable(LibLi)

if(LibLi_SOURCES)
	target_sources(LibLi PRIVATE ${LibLi_SOURCES})
endif()

get_directory_property(CMKR_VS_STARTUP_PROJECT DIRECTORY ${PROJECT_SOURCE_DIR} DEFINITION VS_STARTUP_PROJECT)
if(NOT CMKR_VS_STARTUP_PROJECT)
	set_property(DIRECTORY ${PROJECT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT LibLi)
endif()

source_group(TREE ${CMAKE_CURRENT_SOURCE_DIR} FILES ${LibLi_SOURCES})

target_compile_features(LibLi PRIVATE
	cxx_std_20
)

target_include_directories(LibLi PRIVATE
	include
)

if(EMSCRIPTEN) # emscripten
	target_link_options(LibLi PRIVATE
		-sEXPORTED_RUNTIME_METHODS=ccall,cwrap
		-sEXTRA_EXPORTED_RUNTIME_METHODS=ccall,cwrap
		-sEXPORTED_FUNCTIONS=_main,_runscript
	)
endif()

unset(CMKR_TARGET)
unset(CMKR_SOURCES)

