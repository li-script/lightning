# TODO:
# - metatables
# - self/this
# - switch/match
# - varargs
# - export/import
# - table unpack ...
# - tail call
# - core::to_string
# - coroutines|thread
# - try/catch
# - ternary
# - string escape, long strings
# - debug info in function
# - GC, JIT
# - format string `{a}`
# macro __add(a, b) {
# 	a + b
# }
# - error on meaningless expressions (e.g. "1 2 3" as a line)
#


let z = ["a", "b", "c", "d"]
let q = {a: 5, b: 5}

let [a,b,,c] = z
print("arr dstrc:", a,b,c)

let {a:aa,b:bb} =  q
print("tbl dstrc:", aa,bb)

const {test2:x} = env {
	test = 4
	const tmp = 4
	test2 = test * test
}
print("env dstrc:", x)

#
#
#for i in 0.. {
#	print(i)
#	if i == 5 {
#		break
#	}
#}

#const make_counter = || {
#	let i = 1;
#	| | { i += 1 }
#}
#@printbc(make_counter)
#
#
#const x = | | $F
#@printbc(x)
#
#for k in $G {
#	print(k)
#}
#
#print("x:", x())



#for k,v in "abcd" {
#	print(k,v)
#}


#const BottomUpTree = |depth| {
#	if depth >= 0 {
#		depth -= 1
#		{ left: $F(depth), right: $F(depth) }
#	}
#}
#const ItemCheck = |tree| {
#	const l = tree.left
#	if l {
#		1 + $F(l) + $F(tree.right)
#	} else {
#		1
#	}
#}
#
#
#const N = 15
#let mindepth = 4
#let maxdepth = mindepth + 2
#if maxdepth < N {
#    maxdepth = N
#}
#
#{ 
#    const stretchdepth = maxdepth + 1
#    const stretchtree = BottomUpTree(stretchdepth)
#}
#
# 
#const longlivedtree = BottomUpTree(maxdepth)
#
#let depth = mindepth
#while depth <= maxdepth {	
#    const iterations = 2 ^ (maxdepth + mindepth - depth)
#	let check = 0
#	let i = 1
#	while i <= iterations {
#        check += ItemCheck(BottomUpTree(depth))
#		i += 1
#	}
#	depth += 2
#}
#
#
#print("fin:", maxdepth, ItemCheck(longlivedtree))







#const tbl = { a: 2, b:4, c: 6 }
#
#const test = |tbl| {
#	for k,v in tbl {
#		print(k,v)
#	}
#}
#@printbc(test)
#test(tbl)


#const test = | | {
#	{
#		let n = 10
#		const x = while n > 0 {
#			print(n)
#			if n==5 {
#				break 6
#			}
#			n -= 1
#		}
#		print("x = ", x)
#	}
#	{
#		let n = 10
#		const r = loop {
#			if n <= 0 {
#				break "lolz"
#			}
#			n -= 1	
#			print("Step: ", n)
#		}
#		print("r = ", r)
#	}
#}
#
#test()
##@printbc(test)




#const test = | | {
#	const a = 0
#	const b = (
#		if a<=1 {
#			5
#		} else if a==3 {
#			6
#		} else {
#			7
#		}) * 3
#
#	print(a, b)
#}
#
#
#
#const x = {x, a:4}
#x.a *= 3
#print(x.a)
#
#test()
#@printbc(test)


#z = 1
#
#print(k == {})
#
#const meme = |n| {
#	z += n;
#	5
#}
#@printbc(meme)
#
#
#print("hello")
#
#print "hi"
#
#return sqrt(meme(4))


#let z;
#const x = 2*4; # const folded
#
#a =  x * x
#b = "test" .. "test2" # const folded
#
#
#let x = 4.421e2 # test
#const y = true
#let ayy = 0b1e10
#
#
#aaaa = (-(1 + 3 % (4 / 6))) * 1
#
#let tbl = {a:4, y, z:y}
#tbl.m = 4
#
#const zz = { 
#	3;
#	4
#}
#tbl.k = {
#	let a = zz;
#	a+=1
#}
#return tbl

#if y {
# 
#} else if x {
#	x = switch x {
#		case 4:
#			5
#			break
#		default:
#			6
#	}
#}
#
#while x != 0 || x != 0 {
#	x -= 1
#	continue
#}
#
#for a in "kek" {
#  x += a;
#}
#
#loop {
#	break
#}
